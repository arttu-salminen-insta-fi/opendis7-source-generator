// autogenerated using string template dis7javalicense.txt

/**
 * Copyright (c) 2008-2023, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD open-source license, see project license.html and license.txt
 */

package edu.nps.moves.dis7.pdus;

import edu.nps.moves.dis7.pdus.*;
import java.util.*;
import java.io.*;
import edu.nps.moves.dis7.enumerations.*;

/**
 * The variable datum type, the datum length, and the value for that variable datum type. Section 6.2.93
 * IEEE Std 1278.1-2012, IEEE Standard for Distributed Interactive Simulation - Application Protocols
 */
public class VariableDatumAutogenerated extends Object implements Serializable
{
   /** Type of variable datum to be transmitted. 32-bit enumeration defined in EBV uid 66 */
   protected VariableRecordType variableDatumID = VariableRecordType.values()[0];

   /** Length, IN BITS, of the variable datum. */
   protected int  variableDatumLength;

   /** This can be any number of bits long, depending on the datum. */
   protected byte[]  variableDatumValue = new byte[0]; 

   /** pad to 64-bit boundary */

   private byte[] padding = new byte[0];


/** Constructor */
 public VariableDatumAutogenerated()
 {
 }

  /**
   * Returns size of this serialized (marshalled) object in bytes
   * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
   * @return serialized size in bytes
   */
public int getMarshalledSize()
{
   int marshalSize = 0; 

   if (variableDatumID != null)
       marshalSize += variableDatumID.getMarshalledSize();
   marshalSize += 4;  // variableDatumLength
   if (variableDatumValue != null)
       marshalSize += variableDatumValue.length * 1;
   if (padding != null)
       marshalSize += padding.length;

   return marshalSize;
}


/** Setter for {@link VariableDatum#variableDatumID}
  * @param pVariableDatumID new value of interest
  * @return same object to permit progressive setters */
public VariableDatumAutogenerated setVariableDatumID(VariableRecordType pVariableDatumID)
{
    variableDatumID = pVariableDatumID;
    return this;
}

/** Getter for {@link VariableDatum#variableDatumID}
  * @return value of interest */
public VariableRecordType getVariableDatumID()
{
    return variableDatumID; 
}

/** Setter for {@link VariableDatum#variableDatumLength}
  * @param pVariableDatumLength new value of interest
  * @return same object to permit progressive setters */
public VariableDatumAutogenerated setVariableDatumLength(int pVariableDatumLength)
{
    variableDatumLength = pVariableDatumLength;
    return this;
}

/** Getter for {@link VariableDatum#variableDatumLength}
  * @return value of interest */
public int getVariableDatumLength()
{
    return variableDatumLength; 
}

/** Setter for {@link VariableDatum#variableDatumValue}
  * @param pVariableDatumValue new value of interest
  * @return same object to permit progressive setters */
public VariableDatumAutogenerated setVariableDatumValue(byte[] pVariableDatumValue)
{
    variableDatumValue = pVariableDatumValue;
    return this;
}

/** Getter for {@link VariableDatum#variableDatumValue}
  * @return value of interest */
public byte[] getVariableDatumValue()
{
    return variableDatumValue; 
}

/**
 * Serializes an object to a DataOutputStream.
 * @throws java.lang.Exception if something goes wrong
 * @see java.io.DataOutputStream
 * @param dos the OutputStream
 */
public void marshal(DataOutputStream dos) throws Exception
{
    try 
    {
       variableDatumID.marshal(dos);
       dos.writeInt(variableDatumLength);

       for (int idx = 0; idx < variableDatumValue.length; idx++)
           dos.writeByte(variableDatumValue[idx]);

       padding = new byte[Align.to64bits(dos)];
    }
    catch(Exception e)
    {
      System.err.println(e);
    }
}

/**
 * Deserializes an object from a DataInputStream.
 * @throws java.lang.Exception if something goes wrong
 * @see java.io.DataInputStream
 * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
 * @param dis the InputStream
 * @return marshalled serialized size in bytes
 */
public int unmarshal(DataInputStream dis) throws Exception
{
    int uPosition = 0;
    try 
    {
        variableDatumID = VariableRecordType.unmarshalEnum(dis);
        uPosition += variableDatumID.getMarshalledSize();
        variableDatumLength = dis.readInt();
        uPosition += 4;
        for (int idx = 0; idx < variableDatumValue.length; idx++)
            variableDatumValue[idx] = dis.readByte();
        uPosition += (variableDatumValue.length * 1);
        padding = new byte[Align.from64bits(uPosition,dis)];
        uPosition += padding.length;
    }
    catch(Exception e)
    { 
      System.err.println(e); 
    }
    return getMarshalledSize();
}

/**
 * Packs an object into the ByteBuffer.
 * @throws java.nio.BufferOverflowException if byteBuffer is too small
 * @throws java.nio.ReadOnlyBufferException if byteBuffer is read only
 * @see java.nio.ByteBuffer
 * @param byteBuffer The ByteBuffer at the position to begin writing
 * @throws Exception ByteBuffer-generated exception
 */
public void marshal(java.nio.ByteBuffer byteBuffer) throws Exception
{
   variableDatumID.marshal(byteBuffer);
   byteBuffer.putInt( (int)variableDatumLength);

   for (int idx = 0; idx < variableDatumValue.length; idx++)
       byteBuffer.put((byte)variableDatumValue[idx]);

   padding = new byte[Align.to64bits(byteBuffer)];
}

/**
 * Unpacks a Pdu from the underlying data.
 * @throws java.nio.BufferUnderflowException if byteBuffer is too small
 * @see java.nio.ByteBuffer
 * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
 * @param byteBuffer The ByteBuffer at the position to begin reading
 * @return marshalled serialized size in bytes
 * @throws Exception ByteBuffer-generated exception
 */
public int unmarshal(java.nio.ByteBuffer byteBuffer) throws Exception
{
    try
    {
        // attribute variableDatumID marked as not serialized
        variableDatumID = VariableRecordType.unmarshalEnum(byteBuffer);
        // attribute variableDatumLength marked as not serialized
        variableDatumLength = byteBuffer.getInt();
        // attribute variableDatumValue marked as not serialized
        for (int idx = 0; idx < variableDatumValue.length; idx++)
            variableDatumValue[idx] = byteBuffer.get();
        // attribute padding marked as not serialized
        padding = new byte[Align.from64bits(byteBuffer)];
    }
    catch (java.nio.BufferUnderflowException bue)
    {
        System.err.println("*** buffer underflow error while unmarshalling " + this.getClass().getName());
    }
    return getMarshalledSize();
}

 /*
  * Override of default equals method.  Calls equalsImpl() for content comparison.
  */
@Override
 public boolean equals(Object obj)
 {
    if(this == obj)
      return true;

    if(obj == null)
       return false;

    if(!getClass().isAssignableFrom(obj.getClass())) //if(getClass() != obj.getClass())
        return false;

    return equalsImpl(obj);
 }

 /**
  * Compare all fields that contribute to the state, ignoring
  * transient and static fields, for <code>this</code> and the supplied object
  * @param obj the object to compare to
  * @return true if the objects are equal, false otherwise.
  */
 public boolean equalsImpl(Object obj)
 {
     boolean ivarsEqual = true;

     final VariableDatumAutogenerated rhs = (VariableDatumAutogenerated)obj;

     if( ! (variableDatumID == rhs.variableDatumID)) ivarsEqual = false;
     if( ! (variableDatumLength == rhs.variableDatumLength)) ivarsEqual = false;

     for (int idx = 0; idx < 0; idx++)
     {
          if(!(variableDatumValue[idx] == rhs.variableDatumValue[idx])) ivarsEqual = false;
     }

    return ivarsEqual;
 }

 @Override
 public String toString()
 {
    StringBuilder sb = new StringBuilder();
    sb.append(getClass().getSimpleName()).append(":\n");

    sb.append(" variableDatumID: ").append(variableDatumID).append("\n");
    sb.append(" variableDatumLength: ").append(variableDatumLength).append("\n");
    sb.append(" variableDatumValue: ").append("\n");
    sb.append(Arrays.toString(variableDatumValue)).append("\n");
    sb.append(" padding: ").append(padding).append("\n");

   return sb.toString();
 }
} // end of class
