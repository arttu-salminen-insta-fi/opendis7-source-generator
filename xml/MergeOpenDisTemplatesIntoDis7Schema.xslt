<?xml version="1.0" encoding="UTF-8"?>
<!--
    title       : MergeOpenDisTemplatesIntoDis7Schema.xslt
    created     : 24 September 2020
    creator     : Don Brutzman
    description : Read all OpenDIS XML templates and convert into DIS 7 Schema
    reference   : AllX3dElementsAttributesTextTemplate.xslt
    reference   : https://www.w3.org/TR/xslt
    identifier  : https://www.web3d.org/x3d/stylesheets/AllX3dElementsAttributesTextTemplate.xslt
    license     : ../license.html
-->

<!-- TODO 

- fix schema declaration
- several base types undefined
- padding fields fixed at 0
- complexType names with nameSuffix 'Type'
- hidden field handled or noted
- ant validation
-->

<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="2.0"
                 xmlns:xs="http://www.w3.org/2001/XMLSchema"
	             xmlns:fn="http://www.w3.org/2005/xpath-functions"
                 xmlns:xi="http://www.w3.org/2001/XInclude"
  exclude-result-prefixes="fn xs xi">
    <!-- https://stackoverflow.com/questions/5258660/saxon-transformerfactory-placing-unneceary-xmlnsxsd-http-www-w3-org-2001-xml -->
    <xsl:output method="html"/> <!-- output methods:  xml html text -->
    
    <!-- ======================================================= -->
    
    <xsl:template match="/"> <!-- process root of input document -->
    
        <!-- https://stackoverflow.com/questions/6129262/xslt-transform-multiple-files-from-subdirectory ?select= ;recurse=yes-->

        <xsl:variable name="relativePathToFiles" select="concat('./','dis_7_2012','/')"/>
        <xsl:message>
            <xsl:text>$relativePathToFiles=</xsl:text>
            <xsl:value-of select="$relativePathToFiles"/>
        </xsl:message>
    
        <xsl:text disable-output-escaping="yes"><![CDATA[<?xml version="1.0" encoding="utf-8"?>]]></xsl:text>
        <xsl:text>&#10;</xsl:text>

        <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
                   elementFormDefault="qualified" attributeFormDefault="unqualified" version="7.0">
            <!--
             xmlns:dis="https://github.com/open-dis/opendis7-source-generator/raw/master/xml/DIS_7_2012.autogenerated.xsd"
            
            <xsl:attribute namespace="xmlns" name="xs">
                <xsl:text>XMLSchema.xsd</xsl:text>
            </xsl:attribute>
            -->
                <!-- http://www.w3.org/2001/XMLSchema -->
                <!-- http://www.w3.org/2001/XMLSchema-instance -->
                <!-- http://www.w3.org/2009/XMLSchema/XMLSchema.xsd -->
                <!-- name="targetNamespace"  namespace="xmlns" name="dis"
            <xsl:attribute name="schemaLocation">
                <xsl:text>http://www.w3.org/2001/XMLSchema.xsd"</xsl:text>
            </xsl:attribute> 
            <xsl:attribute name="targetNamespace">
                <xsl:text>https://github.com/open-dis/opendis7-source-generator/raw/master/xml/DIS_7_2012.autogenerated.xsd</xsl:text>
            </xsl:attribute>
            <xsl:attribute name="elementFormDefault">
                <xsl:text>qualified</xsl:text>
            </xsl:attribute>
            <xsl:attribute name="attributeFormDefault">
                <xsl:text>unqualified</xsl:text>
            </xsl:attribute>
            <xsl:attribute name="version">
                <xsl:text>7.0</xsl:text>
            </xsl:attribute> -->
            
            <!--
            <xsl:comment> 
                <xsl:text>How to integrate these attributes?</xsl:text>
                <xsl:text>&#10;</xsl:text>
                <xsl:text>   </xsl:text>
                <xsl:text disable-output-escaping="yes"><![CDATA[ xmlns:xs="http://www.w3.org/2001/XMLSchema"]]></xsl:text>
                <xsl:text disable-output-escaping="yes"><![CDATA[ targetNamespace="https://github.com/open-dis/opendis7-source-generator/raw/master/xml/DIS_7_2012.autogenerated.xsd"]]></xsl:text>
                <xsl:text disable-output-escaping="yes"><![CDATA[ elementFormDefault="unqualified"]]></xsl:text>
                <xsl:text disable-output-escaping="yes"><![CDATA[ attributeFormDefault="unqualified"]]></xsl:text>
                <xsl:text disable-output-escaping="yes"><![CDATA[ version="7.0"]]></xsl:text>
            </xsl:comment>
            -->
            
   <xs:element name="DIS">
      <xs:annotation>
         <xs:appinfo>Root element for DIS PDU log, optionally contains head meta information</xs:appinfo>
         <xs:documentation>https://savage.nps.edu/opendis7-java/xml/SchemaDocumentation</xs:documentation>
      </xs:annotation>
      <xs:complexType>
		<xs:sequence>
			<xs:element ref="head" minOccurs="0"/>
			<xs:choice minOccurs="0" maxOccurs="unbounded">
                            <xs:annotation>
                                <xs:documentation>IEEE 1278.1 DIS specification, 5.2.4 Families and types of PDUs</xs:documentation>
                            </xs:annotation>
                            <xsl:text>&#10;</xsl:text>

            <xsl:message>
                <xsl:text>*** generate node references</xsl:text>
            </xsl:message>
            <xsl:for-each select="//xi:include"> <!-- now repeat for each include -->
            <!--<xsl:sort select="@href" order="ascending"/>-->

                <xsl:variable name="pduFamilyDocument" select="@href"/>
                
                <xsl:variable name="nodes" select="doc(concat($relativePathToFiles,$pduFamilyDocument))//classes/class"/>
                <!--
                <xsl:message>
                    <xsl:text>*** $nodes=</xsl:text>
                    <xsl:value-of select="$nodes"/>
                </xsl:message>
                -->
                <xsl:for-each select="$nodes[ends-with(@name,'Pdu')][not(ends-with(@name,'FamilyPdu'))]">
                    <!-- this only sorts current family
                    <xsl:sort select="number(@id)" order="ascending"/> -->

                    <xsl:text disable-output-escaping="yes">&lt;!--</xsl:text>
                    <xsl:text> PDU </xsl:text>
                    <xsl:if test="(number(@id) le 9)">
                        <xsl:text>0</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="@id"/>
                    <xsl:text> </xsl:text>
                    <xsl:text disable-output-escaping="yes">--&gt;</xsl:text>
                    <xsl:text> </xsl:text>
                    <xsl:text disable-output-escaping="yes">&lt;xs:element ref="</xsl:text>
                    <xsl:value-of select="@name"/>
                    <xsl:text disable-output-escaping="yes">"/&gt;</xsl:text>
                    <xsl:if test="(string-length(@aliasFor) > 0)">
                        <xsl:text> </xsl:text>
                        <xsl:text disable-output-escaping="yes">&lt;!--</xsl:text>
                        <xsl:text> @aliasFor="</xsl:text>
                        <xsl:value-of select="@aliasFor"/>
                        <xsl:text>"</xsl:text>
                        <xsl:text> </xsl:text>
                    <xsl:text disable-output-escaping="yes">--&gt;</xsl:text>
                        
                    </xsl:if>
                    <xsl:text>&#10;</xsl:text>
                </xsl:for-each>
            </xsl:for-each>
            <xsl:message>
                <xsl:text>*** generate node references complete</xsl:text>
            </xsl:message>
                
			</xs:choice>
		</xs:sequence>
		<xs:attribute name="version" type="xs:string" fixed="7.0">
			<xs:annotation>
				<xs:appinfo>Warning: version is required and must be specified in source document.</xs:appinfo>
			</xs:annotation>
		</xs:attribute>
      </xs:complexType>
   </xs:element>
    <xs:element name="head">
        <xs:annotation>
            <xs:appinfo>Functional summary: each DIS file includes an optional head statement that can contain any number of meta statements.</xs:appinfo>
            <xs:documentation source="https://www.web3d.org/documents/specifications/19776-1/V3.3/Part01/concepts.html#Header"/>
        </xs:annotation>
        <xs:complexType>
			<xs:sequence>
				<xs:element ref="meta" minOccurs="0" maxOccurs="unbounded"/>
			</xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="meta">
        <xs:annotation>
            <xs:appinfo>Functional summary: the meta statement provides metadata information about a file, where name and content attributes provide attribute=value metadata pairs.</xs:appinfo>
            <xs:documentation source="https://www.web3d.org/documents/specifications/19776-1/V3.3/Part01/concepts.html#Header"/>
        </xs:annotation>
        <xs:complexType>
                    <xs:attribute name="name" type="xs:string" use="required">
                        <xs:annotation>
                            <xs:documentation source="http://www.dublincore.org/documents/dcmi-terms/#terms-description"/>
                            <!-- https://www.web3d.org/x3d/content/examples/X3dSceneAuthoringHints.html#NameTyping -->
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="content" type="xs:string" use="required">
                        <xs:annotation>
                            <xs:documentation source="http://www.w3.org/TR/html4/struct/global.html#adef-content"/>
                        </xs:annotation>
                    </xs:attribute>
                    <!-- other html atttributes include dir (direction), http-equiv, lang (language) and scheme -->
        </xs:complexType>
    </xs:element>
    
<xsl:message>
    <xsl:text>*** Top-level DIS_7_2012.xml definitions file has count(//*/*[local-name() = 'class'])=</xsl:text>
    <xsl:value-of select="count(//*/*[local-name() = 'class'])"/>
    <xsl:text>, count(//class)=</xsl:text>
    <xsl:value-of select="count(//class)"/>
</xsl:message>

            <!-- TODO combine the following node lists so that overall result can be alphabetized -->
            
<!-- this code is not working
            <xsl:variable name="allClassNodeList">
                <xsl:for-each select="//xi:include"> <! - - now repeat for each include - - >
                    <xsl:variable name="nodes" select="doc(concat($relativePathToFiles,$pduFamilyDocument))"/>
                    <xsl:value-of select="$nodes/classes/class"/>
<xsl:message>
    <xsl:text>*** debug count($nodes/classes/class)=</xsl:text>
    <xsl:value-of select="count($nodes/classes/class)"/>
</xsl:message>
                </xsl:for-each>
                
            </xsl:variable>
            
<xsl:message>
    <xsl:text>*** debug count($allClassNodeList/*)=</xsl:text>
    <xsl:value-of select="count($allClassNodeList/*)"/>
    <xsl:text> string($allClassNodeList/*)=</xsl:text>
    <xsl:value-of select="string($allClassNodeList/*)"/>
    <xsl:text> [</xsl:text>
    <xsl:for-each select="$allClassNodeList/*">
        <xsl:text>, </xsl:text>
        <xsl:value-of select="local-name()"/>
        <xsl:text> </xsl:text>
        <xsl:value-of select="@name"/>
    </xsl:for-each>
    <xsl:text>]</xsl:text>
</xsl:message>  -->

            <!-- special definitions while sorting out complete interface hierarchy -->
            <xs:complexType name="rootType" abstract="true"/>          

            <xsl:for-each select="//xi:include"> <!-- now repeat for each include -->
            <!--<xsl:sort select="@href" order="ascending"/>-->

                <xsl:variable name="pduFamilyDocument" select="@href"/>
                <xsl:message>
                    <xsl:text>====================================================</xsl:text>
                </xsl:message>
                <xsl:message>
                    <xsl:text>xi:import href=</xsl:text>
                    <xsl:value-of select="$pduFamilyDocument"/>
                </xsl:message>
                <xsl:message>
                    <xsl:text> relative path=</xsl:text>
                    <xsl:value-of select="concat($relativePathToFiles,$pduFamilyDocument)"/>
                </xsl:message>

                <xsl:variable name="nodes" select="doc(concat($relativePathToFiles,$pduFamilyDocument))"/>
                <xsl:message>
                    <xsl:value-of select="$pduFamilyDocument"/>
                    <xsl:text> has count($nodes/*/*)=</xsl:text>
                    <xsl:value-of select="count($nodes/*/*)"/>
                    <xsl:text>, count($nodes/classes/class)=</xsl:text>
                    <xsl:value-of select="count($nodes/classes/class)"/>
                </xsl:message>
                <xsl:if test="count($nodes/*/*) != count($nodes/classes/class)">
                    <xsl:message>
                        <xsl:text>*** unexpected top-level element (other than class) detected in this document</xsl:text>
                    </xsl:message>
                </xsl:if>

                <!-- now process all class definitions in the document -->
                <xsl:for-each select="$nodes/*">

                    <!-- debug -->
                    <xsl:comment>
                        <xsl:value-of select="$pduFamilyDocument"/>
                        <xsl:text> contains </xsl:text>
                        <xsl:value-of select="count(//class)"/>
                        <xsl:text> classes</xsl:text>
                        
                    </xsl:comment>
                    <xsl:apply-templates select="/classes/class">
                        <xsl:sort select="./@name[ends-with(.,'Pdu')]"  order="ascending"/>
                        <xsl:sort select="./@name[ends-with(.,'Type')]" order="ascending"/>
                 <!--
                        <xsl:sort select="@name" order="ascending"/>
                        <xsl:sort select="not(ends-with(@name,'PduType') or ends-with(@name,'Pdu'))" order="ascending"/>
                        <xsl:sort select="@name[not(contains(.,'Family'))]" order="ascending"/>
                        <xsl:sort select="@name[    contains(.,'Family') ]"/>-->
                    </xsl:apply-templates>

                </xsl:for-each>
                
                <xsl:message>
                    <xsl:text>finished processing </xsl:text>
                    <xsl:value-of select="$pduFamilyDocument"/>
                </xsl:message>

            </xsl:for-each><!-- PDU XML file -->
            
            <xsl:call-template name="create-complex-types-primary-document"/> <!-- classes/class in topmost document -->

            <xsl:message>
                <xsl:text>====================================================</xsl:text>
            </xsl:message>
        
        </xs:schema><!-- end schema -->
        
    </xsl:template>

    <!-- ===================================================== -->
    
    <xsl:template match="classes"> 
        
        <xsl:apply-templates select="class"/><!-- process each contained class element -->
        
    </xsl:template>

    <!-- ===================================================== -->
    
    <!-- rule to ignore already-handled elements -->
    <xsl:template match="xi:include | cpp | java | csharp | objectlist | padtoschema | primitive | primitivelist | 
                         sisobitfield | sisoenum | staticivar">
        
        <!-- ignore -->
        
    </xsl:template>

    <!-- ===================================================== -->
    
    <xsl:template match="*"> <!-- rule to process each element -->
        
        <xsl:variable name="primitiveListType">
            <xsl:choose>
                <xsl:when test="(string-length(primitivelist/primitive/@type) > 0)">
                    <xsl:call-template name="simple-type-normalization">
                        <xsl:with-param name="originalType">
                            <xsl:value-of select="primitivelist/primitive/@type"/>
                        </xsl:with-param>
                    </xsl:call-template>
                </xsl:when>
                <xsl:when test="(primitivelist/@couldBeString = 'true')">
                    <xsl:text>xs:string</xsl:text>
                </xsl:when>
                <xsl:when test="(count(primitivelist) > 0)">
                    <xsl:call-template name="warning-comment-message">
                        <xsl:with-param name="warning">
                            <xsl:text>no contained primitive type found with primitivelist for </xsl:text>
                            <xsl:value-of select="local-name(..)"/>
                            <xsl:text> </xsl:text>
                            <xsl:value-of select="../@name"/>
                            <xsl:text> </xsl:text>
                            <xsl:text> </xsl:text>
                            <xsl:value-of select="local-name()"/>
                            <xsl:text> </xsl:text>
                            <xsl:value-of select="@name"/>
                        </xsl:with-param>
                    </xsl:call-template>
                </xsl:when>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="objectListType">
            <xsl:choose>
                <xsl:when test="(objectlist/classRef/@name = 'UnsignedDISInteger')">
                    <xsl:call-template name="simple-type-normalization">
                        <xsl:with-param name="originalType">
                            <xsl:text>uint64</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                </xsl:when>
                <xsl:when test="(string-length(objectlist/classRef/@name) > 0)">
                    <xsl:value-of select="objectlist/classRef/@name"/>
                </xsl:when>
                <xsl:when test="(count(objectlist) > 0)">
                    <xsl:call-template name="warning-comment-message">
                        <xsl:with-param name="warning">
                            <xsl:text>no contained type found with objectlist </xsl:text>
                            <xsl:value-of select="local-name(..)"/>
                            <xsl:text> </xsl:text>
                            <xsl:value-of select="../@name"/>
                            <xsl:text> </xsl:text>
                            <xsl:value-of select="local-name()"/>
                            <xsl:text> </xsl:text>
                            <xsl:value-of select="@name"/>
                        </xsl:with-param>
                    </xsl:call-template>
                </xsl:when>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="nameSuffix">
            <xsl:if test="not(contains(@name, 'Pdu')) or starts-with(@name, 'Pdu') or contains(@name, 'FamilyPdu')">
                <xsl:text>Type</xsl:text>
            </xsl:if>
        </xsl:variable>
                
        <!-- use names of corresponding schema elements -->
        <xsl:choose>
            <!-- ===================================================== -->
            <!-- Pdu types -->
            <xsl:when test="(local-name() = 'class') and contains(@name, 'Family')">
                <xs:complexType name="{concat(@name,$nameSuffix)}" abstract="{@abstract}">
                    <xsl:call-template name="handle-comment-documentation"/>
                    <xs:complexContent>
                        <xs:extension base="{concat(@inheritsFrom,'Type')}"><!-- nameSuffix -->
                            <xsl:if test="(count(attribute[   (classRef)]) > 0)">
                                <xs:sequence>
                                    <xsl:apply-templates select="attribute[   (classRef)]">
                                        <xsl:sort select="classRef"/>
                                    </xsl:apply-templates>
                                </xs:sequence>
                            </xsl:if>
                            <xs:attribute name="protocolFamily" default="{initialValue[@name='protocolFamily']/@value}"/>
                        </xs:extension>
                    </xs:complexContent>
                </xs:complexType>
            </xsl:when>
            <!-- ===================================================== -->
            <!-- Pdu elements (not Pdu and PduBase) -->
            <xsl:when test="(local-name() = 'class') and not(contains(@name, 'Family')) and not(@abstract = 'true') and
                             ends-with(@name, 'Pdu') and not(starts-with(@name, 'Pdu'))">
            
                <xsl:element name="xs:element">
                    <xsl:attribute name="name"   select="@name"/>
                    
                    <!-- debug
                    <xsl:comment>
                        <xsl:text>debug: handle Pdu elements (not Pdu and PduBase)</xsl:text>
                    </xsl:comment> -->
                    
                    <xsl:call-template name="handle-comment-documentation"/>
                    
                    <xsl:variable name="family" select="concat(../class[contains(@name, 'Family')]/@name,'Type')"/><!-- nameSuffix -->
                    <xs:complexType><!-- anonymous -->
                        <xs:complexContent>
                            <xs:extension base="{$family}">
                                <!-- contained classes/elements first -->
                        <xsl:if test="                (count(attribute[(classRef)]) > 0) or
                                                      (count(attribute[objectlist/classRef][objectlist/classRef/@name != 'UnsignedDISInteger']) > 0)">
                            <xs:sequence>
                                <xsl:apply-templates select="attribute[   (classRef)] | 
                                                             attribute[objectlist/classRef][objectlist/classRef/@name != 'UnsignedDISInteger']"/>
                            </xs:sequence>
                            
                            <xsl:if test="(count(attribute[not(classRef)][not(objectlist)]) +
                                           count(attribute[objectlist/classRef][objectlist/classRef/@name  = 'UnsignedDISInteger']) > 0)">
        <xsl:comment>
            <xsl:text> ========== debug: divider between elements and attributes ========== </xsl:text>
        </xsl:comment>
                            </xsl:if>
                        </xsl:if>
                                <xsl:element name="xs:attribute">
                                    <xsl:variable  name="familyLiteral"><xsl:text>family</xsl:text></xsl:variable>
                                    <xsl:attribute name="name" select="$familyLiteral"/>
                                    <xsl:attribute name="fixed"  select="$family"/>
                                </xsl:element>
                                <xsl:apply-templates select="attribute[not(classRef)][not(objectlist)]"/>
<!--
        <xsl:comment>
            <xsl:text> ========== debug: schema attribute divider before UnsignedDISInteger only ========== </xsl:text>
        </xsl:comment>
-->
                                <xsl:apply-templates select="attribute[objectlist/classRef][objectlist/classRef/@name  = 'UnsignedDISInteger']"/>
                            </xs:extension>
                        </xs:complexContent>
                    </xs:complexType>
                </xsl:element>
            </xsl:when>
            <!-- ===================================================== -->
            <!-- another class, providing Pdu types -->
            <xsl:when test="(local-name() = 'class') and not(contains(@name, 'Family'))">
                <xsl:element name="xs:complexType">
                    <xsl:attribute name="name"   select="concat(@name,'Type')"/><!-- nameSuffix -->
                    
                    <xsl:comment>
                        <xsl:text>debug: another class, providing Pdu types</xsl:text>
                    </xsl:comment>
                    
                    <xsl:call-template name="handle-comment-documentation"/>
                    
                    <xsl:variable name="family" select="concat(../class[contains(@name, 'Family')]/@name,'Type')"/><!-- nameSuffix -->
                <!--<xs:complexType> anonymous -->
                        <xs:complexContent>
                            <xs:extension base="{$family}">
                                <!-- contained classes/elements first -->
                        <xsl:if test="                (count(attribute[(classRef)]) > 0) or
                                                      (count(attribute[objectlist/classRef][objectlist/classRef/@name != 'UnsignedDISInteger']) > 0)">
                            <xs:sequence>
                                <xsl:apply-templates select="attribute[   (classRef)] | 
                                                             attribute[objectlist/classRef][objectlist/classRef/@name != 'UnsignedDISInteger']"/>
                            </xs:sequence>
                            
                            <xsl:if test="(count(attribute[not(classRef)][not(objectlist)]) > 0)">
        <xsl:comment>
            <xsl:text> ========== debug: divider between elements and attributes ========== </xsl:text>
        </xsl:comment>
                            </xsl:if>
                        </xsl:if>
                                <xsl:element name="xs:attribute">
                                    <xsl:variable  name="familyLiteral"><xsl:text>family</xsl:text></xsl:variable>
                                    <xsl:attribute name="name" select="$familyLiteral"/>
                                    <xsl:attribute name="fixed"  select="$family"/>
                                </xsl:element>
                                <xsl:apply-templates select="attribute[not(classRef)][not(objectlist)]"/>
<!--
        <xsl:comment>
            <xsl:text> ========== debug: schema attribute divider before UnsignedDISInteger only ========== </xsl:text>
        </xsl:comment>
-->
                                <xsl:apply-templates select="attribute[objectlist/classRef][objectlist/classRef/@name  = 'UnsignedDISInteger']"/>
                            </xs:extension>
                        </xs:complexContent>
                <!--</xs:complexType>-->
                </xsl:element>
            </xsl:when>
            <!-- ===================================== -->
            <xsl:when test="(local-name() = 'attribute') and (classRef)">
                <!-- contained content -->
                <xsl:variable name="thisType" select="concat(classRef/@name,'Type')"/><!-- nameSuffix -->
                <!-- debug
                <xsl:comment>
                    <xsl:text>*** Attribute </xsl:text>
                    <xsl:value-of select="../@name"/>
                    <xsl:text> </xsl:text>
                    <xsl:value-of select="@name"/>
                    <xsl:text> with classRef type=</xsl:text>
                    <xsl:value-of select="classRef/@name"/>
                    <xsl:text>=</xsl:text>
                    <xsl:value-of select="$thisType"/>
                </xsl:comment>
                -->
                <xs:element name="{@name}" type="{$thisType}">
                    <xsl:call-template name="handle-comment-documentation"/>
                </xs:element>
            </xsl:when>
            <!-- ===================================== -->
            <xsl:when test="(local-name() = 'attribute') and (objectlist) and 
                            not(objectlist/classRef/@name = 'UnsignedDISInteger')">
                <!-- contained content -->
                <xsl:variable name="thisType" select="concat(objectlist/classRef/@name,'Type')"/><!-- nameSuffix -->
                <!-- debug
                -->
                <xsl:comment>
                    <xsl:text>Attribute (as element) </xsl:text>
                    <xsl:value-of select="../@name"/>
                    <xsl:text> </xsl:text>
                    <xsl:value-of select="@name"/>
                    <xsl:text> with objectlist classRef name=</xsl:text>
                    <xsl:value-of select="objectlist/classRef/@name"/>
                    <xsl:text>, type=</xsl:text>
                    <xsl:value-of select="$thisType"/>
                </xsl:comment>
                <xsl:variable name="combinedCountFieldName">
                    <xsl:value-of select="objectlist/@countFieldName"/>
                    <!-- handle special case of AggregateStatePdu containing three EntityID fields in a row, merge them -->
                    <xsl:if test="(../@name = 'AggregateStatePdu') and (@name = 'entityIDList')">
                        <xsl:text> + </xsl:text>
                        <xsl:value-of select="../attribute[@name = 'silentAggregateSystemList']/objectlist/@countFieldName"/>
                        <xsl:text> + </xsl:text>
                        <xsl:value-of select="../attribute[@name = 'silentEntitySystemList'   ]/objectlist/@countFieldName"/>
                    </xsl:if>
                </xsl:variable>
                <!-- handle special case of AggregateStatePdu containing three EntityID fields in a row, merge them -->
                <xsl:if test="not((../@name = 'AggregateStatePdu') and ((@name = 'silentAggregateSystemList') or (@name = 'silentEntitySystemList')))">
                    <xs:sequence minOccurs="0" maxOccurs="unbounded">
                        <xs:annotation>
                            <xs:appinfo>
    <xsl:text>Number of elements is determined by size field</xsl:text><xsl:value-of select="$combinedCountFieldName"/><xsl:text> and can be 0 or greater.
    Ensure that the total PDU size does not exceed maximums allowed in IEEE DIS Specification.</xsl:text>
                            </xs:appinfo>
                            <!-- TODO consider further guidance on maximum values -->
                            <xs:documentation><xsl:value-of select="$combinedCountFieldName"/></xs:documentation>
                        </xs:annotation>
                        <xs:element name="{objectlist/classRef/@name}" type="{$thisType}">
                            <xsl:call-template name="handle-comment-documentation"/>
                        </xs:element>
                    </xs:sequence>
                </xsl:if>
            </xsl:when>
            <!-- ===================================== -->
            <xsl:when test="(local-name() = 'attribute') and not(classRef)">
                
                <xsl:choose>
                    <xsl:when test="((../@name = 'Pdu')     and (@name = 'protocolFamily')) or
                                    ((../@name = 'PduBase') and (@name = 'padding'))">
                        <!-- not clear how to override attributes in complexType inheritance, so avoid defining parent version instead -->
                        <xsl:comment>
                            <xsl:text>xs:attribute </xsl:text>
                            <xsl:value-of select="@name"/>
                            <xsl:text> is defined in subclasses for </xsl:text>
                            <xsl:value-of select="../@name"/>
                            <xsl:text> rather than here, in order to avoid inheritance collisions.</xsl:text>
                        </xsl:comment>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:element name="xs:attribute">
                            <xsl:attribute name="name" select="@name"/>                        
                            <xsl:if test="not(count(*[(local-name() = 'primitivelist') or (local-name() = 'objectlist')]) > 0)">
                                <!-- otherwise handled by contained xs:simpleType instead -->
                                <xsl:attribute name="type">
                                    <xsl:choose>
                                        <xsl:when test="(string-length(sisobitfield/@size) > 0)">
                                            <xsl:call-template name="simple-type-normalization">
                                                <xsl:with-param name="originalType">
                                                    <xsl:text>uint</xsl:text>
                                                    <xsl:value-of select="sisobitfield/@size"/>
                                                </xsl:with-param>
                                            </xsl:call-template>
                                        </xsl:when>
                                        <xsl:when test="(string-length(primitivelist/primitive/@type) > 0)">
                                            <xsl:call-template name="simple-type-normalization">
                                                <xsl:with-param name="originalType">
                                                    <xsl:value-of select="primitivelist/primitive/@type"/>
                                                </xsl:with-param>
                                            </xsl:call-template>
                                        </xsl:when>
                                        <xsl:when test="(count(*[local-name() = 'padtoboundary']) > 0) and (string-length(padtoboundary/@length) > 0)">
                                            <xsl:call-template name="simple-type-normalization">
                                                <xsl:with-param name="originalType">
                                                    <xsl:text>uint</xsl:text>
                                                    <xsl:value-of select="padtoboundary/@length"/><!-- 16, 32 or 64 -->
                                                </xsl:with-param>
                                            </xsl:call-template>
                                        </xsl:when>
                                        <xsl:when test="(count(*[local-name() = 'staticivar']) > 0) and (string-length(staticivar/@type) > 0)">
                                            <xsl:call-template name="simple-type-normalization">
                                                <xsl:with-param name="originalType">
                                                    <xsl:value-of select="staticivar/@type"/>
                                                </xsl:with-param>
                                            </xsl:call-template>
                                        </xsl:when>
                                        <xsl:when test="(count(*[local-name() = 'primitive']) > 0) and (string-length(primitive/@type) > 0)">
                                            <xsl:call-template name="simple-type-normalization">
                                                <xsl:with-param name="originalType">
                                                    <xsl:value-of select="primitive/@type"/>
                                                </xsl:with-param>
                                            </xsl:call-template>
                                        </xsl:when>
                                        <xsl:when test="*[local-name() = 'primitive']">
                                            <xsl:text>xs:string</xsl:text>
                                            <xsl:call-template name="warning-comment-message">
                                                <xsl:with-param name="warning">
                                                    <xsl:text>attribute </xsl:text>
                                                    <xsl:value-of select="@name"/>
                                                    <xsl:text> contained primitive has no type definition</xsl:text>
                                                </xsl:with-param>
                                            </xsl:call-template>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:text>xs:string</xsl:text>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </xsl:attribute>
                            </xsl:if>
                            <xsl:if test="(count(*[local-name() = 'staticivar']) > 0)">
                                <xsl:attribute name="fixed" select="staticivar/@value"/>
                            </xsl:if>
                            <xsl:call-template name="handle-comment-documentation"/>
                            <!-- contained content -->
                            <xsl:variable name="countFieldName"
                                        select="*[(local-name() = 'primitivelist') or (local-name() = 'objectlist')]/@countFieldName"/>
                            <xsl:choose>
                                <xsl:when test="(string-length($countFieldName) > 0)">

                                    <!-- debug
                                    <xsl:call-template name="warning-comment-message">
                                        <xsl:with-param name="warning">
                                            <xsl:value-of select="../@name"/>
                                            <xsl:text> attribute </xsl:text>
                                            <xsl:value-of select="@name"/>
                                            <xsl:choose>
                                                <xsl:when test="(count(*[local-name() = 'primitivelist']) > 0)">
                                                    <xsl:text>, type primitivelist</xsl:text>
                                                    <xsl:text>, $primitiveListType='</xsl:text>
                                                    <xsl:value-of select="$primitiveListType"/>
                                                    <xsl:text>' countFieldName='</xsl:text>
                                                    <xsl:value-of select="$countFieldName"/>
                                                    <xsl:text>' length='</xsl:text>
                                                    <xsl:value-of select="primitivelist/@length"/>
                                                    <xsl:text>' fixedlength='</xsl:text>
                                                    <xsl:value-of select="primitivelist/@fixedlength"/>
                                                    <xsl:text>' (TODO unhandled), couldBeString='</xsl:text>
                                                    <xsl:value-of select="primitivelist/@couldBeString"/>
                                                    <xsl:text>' (ignored, ambiguous)</xsl:text>
                                                </xsl:when>
                                                <xsl:when test="(count(*[local-name() = 'objectlist']) > 0)">
                                                    <xsl:text>, type objectlist</xsl:text>
                                                    <xsl:text>, $objectListType='</xsl:text>
                                                    <xsl:value-of select="$objectListType"/>
                                                    <xsl:text>, countFieldName='</xsl:text>
                                                    <xsl:value-of select="$countFieldName"/>
                                                    <xsl:text>'</xsl:text>
                                                </xsl:when>
                                            </xsl:choose>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    -->
                                    <xsl:if test="not(../*[@name = $countFieldName])">
                                        <xsl:call-template name="warning-comment-message">
                                            <xsl:with-param name="warning">
                                                <xsl:value-of select="../@name"/>
                                                <xsl:text> has no sibling attribute defined that matches countFieldName='</xsl:text>
                                                <xsl:value-of select="$countFieldName"/>
                                                <xsl:text>'</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                    </xsl:if>
                                    <xsl:choose>
                                        <xsl:when test="(string-length(primitivelist/@length) > 0) or (string-length(primitivelist/@countFieldName) > 0)">
                                            <!-- W3C XML Schema Definition Language (XSD) 1.1 Part 2: Datatypes, 4.3.1 length -->
                                            <!-- https://www.w3.org/TR/xmlschema11-2/#rf-length -->
                                            <!-- https://stackoverflow.com/questions/10192943/is-it-possible-to-specify-a-list-length-on-an-anonymous-type -->
                                            <xs:simpleType><!-- anonymous primitivelist with restricted length -->
                                                <xsl:if test="(string-length($countFieldName) > 0)">
                                                    <xsl:element name="xs:annotation">
                                                        <xsl:element name="xs:appinfo">
                                                            <xsl:text>Attribute </xsl:text>
                                                            <xsl:value-of select="$countFieldName"/>
                                                            <xsl:text> determines the length of this list.</xsl:text>
                                                        </xsl:element>
                                                    </xsl:element>
                                                </xsl:if>
                                                <xs:restriction>
                                                    <xs:simpleType>
                                                        <xs:list itemType='{$primitiveListType}'/>
                                                    </xs:simpleType>
                                                    <xsl:variable name="fixedValue">
                                                        <xsl:choose>
                                                            <xsl:when test="(string-length(primitivelist/@fixedlength) > 0)">
                                                                <xsl:value-of select="primitivelist/@fixedlength"/>
                                                            </xsl:when>
                                                            <xsl:otherwise>
                                                                <xsl:text>false</xsl:text>
                                                            </xsl:otherwise>
                                                        </xsl:choose>
                                                    </xsl:variable>
                                                    <xsl:if test="(string-length(primitivelist/@length) > 0)">
                                                        <xs:length value="{primitivelist/@length}" fixed="{$fixedValue}"/>
                                                    </xsl:if>
                                                </xs:restriction>
                                            </xs:simpleType>
                                        </xsl:when>
                                        <xsl:when test="(string-length(objectlist/@countFieldName) > 0) and starts-with($objectListType,'xs:')">
                                           <xs:simpleType><!-- anonymous primitivelist with restricted length -->
                                                <xsl:if test="(string-length($countFieldName) > 0)">
                                                    <xsl:element name="xs:annotation">
                                                        <xsl:element name="xs:appinfo">
                                                            <xsl:text>Attribute </xsl:text>
                                                            <xsl:value-of select="$countFieldName"/>
                                                            <xsl:text> determines the length of this list.</xsl:text>
                                                        </xsl:element>
                                                    </xsl:element>
                                                </xsl:if>
                                                <xs:list itemType='{$objectListType}'/>
                                            </xs:simpleType>
                                        </xsl:when>
                                        <!-- TODO
                                        <xsl:when test="(string-length(objectlist/@countFieldName) > 0)">
                                            <xsl:comment>
                                                <xsl:text>TODO objectlist </xsl:text>
                                                <xsl:value-of select="$objectListType"/>
                                                <xsl:text>: move this case up, it is an object and not an attribute </xsl:text>
                                            </xsl:comment>
                                               <xs:complexType>
                                                    <xsl:if test="(string-length($countFieldName) > 0)">
                                                        <xsl:element name="xs:annotation">
                                                            <xsl:element name="xs:appinfo">
                                                                <xsl:text>Attribute </xsl:text>
                                                                <xsl:value-of select="$countFieldName"/>
                                                                <xsl:text> determines the length of this list.</xsl:text>
                                                            </xsl:element>
                                                        </xsl:element>
                                                    </xsl:if>
                                                </xs:complexType>
                                        </xsl:when>
                                             -->
                                    </xsl:choose>
                                </xsl:when>
                            </xsl:choose>
                            <xsl:apply-templates select="*"/>
                        </xsl:element><!-- name="xs:attribute" -->
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <!-- ===================================== -->
            <xsl:otherwise>
                <!-- Developmental checks on completeness of support -->
                <xsl:if test="not(local-name() = 'initialValue')  and not(@name = 'protocolFamily') and 
                              not(local-name() = 'primitivelist') and not(@name = 'EulerAngles') and 
                              not(local-name() = 'padtoboundary') and 
                              not(local-name() = 'staticivar')    and 
                              not(local-name() = 'sisobitfield')  and 
                              not(local-name() = 'objectlist')    and not(@name = 'objectlist') and 
                              not(string-length($objectListType) > 0)">
                    <xsl:call-template name="warning-comment-message">
                        <xsl:with-param name="warning">
                            <xsl:text>TODO unhandled definition: </xsl:text>
                            <xsl:value-of select="local-name(../..)"/>
                            <xsl:text> </xsl:text>
                            <xsl:value-of select="../../@name"/>
                            <xsl:text> </xsl:text>
                            <xsl:value-of select="local-name(..)"/>
                            <xsl:text> </xsl:text>
                            <xsl:value-of select="../@name"/>
                            <xsl:text> </xsl:text>
                            <xsl:value-of select="local-name()"/>
                            <xsl:text> </xsl:text>
                            <xsl:value-of select="@name"/><!-- if present -->
                            <xsl:if test="(string-length($primitiveListType) > 0)">
                                <xsl:text> primitivelist </xsl:text>
                                <xsl:value-of select="$primitiveListType"/>
                            </xsl:if>
                            <xsl:if test="(string-length($objectListType) > 0)">
                                <xsl:text> objectlist </xsl:text>
                                <xsl:value-of select="$objectListType"/>
                            </xsl:if>
                        </xsl:with-param>
                    </xsl:call-template>
                </xsl:if>
            </xsl:otherwise>
        </xsl:choose>

        <!-- report unhandledAttributes for this element -->
        <xsl:variable name="unhandledAttributes">
            <xsl:value-of select="@*[(local-name() != 'comment')]
                                    [(local-name() != 'name')]
                                    [(local-name(..) != 'initialValue') and (../@name != 'protocolFamily') and (local-name() != 'value')]"/>
        </xsl:variable>
        <xsl:if test="(count($unhandledAttributes) > 0) and (string-length(local-name($unhandledAttributes[1])) > 0)">
            <xsl:call-template name="warning-comment-message">
                <xsl:with-param name="warning">
                    <xsl:text>element </xsl:text>
                    <xsl:value-of select="local-name()"/>
                    <xsl:text> has potentially unhandledAttributes:</xsl:text>
                    <xsl:for-each select="$unhandledAttributes">
                        <xsl:text> </xsl:text>
                        <xsl:value-of select="local-name()"/>
                        <xsl:text>='</xsl:text>
                        <xsl:value-of select="."/>
                        <xsl:text>' </xsl:text>
                    </xsl:for-each>
                </xsl:with-param>
            </xsl:call-template>
        </xsl:if>
        <!-- common final processing for each original element, if any -->
        
    </xsl:template>

    <!-- ===================================================== -->
    
    <xsl:template match="@*"> <!-- rule to process each attribute -->
        
        <!-- common processing for each attribute -->
        <xsl:text> </xsl:text>
        <xsl:value-of select="local-name()"/>
        <xsl:text>='</xsl:text>
        <xsl:value-of select="."/>
        <xsl:text>'</xsl:text>
        
    </xsl:template>

    <!-- ===================================================== -->
    
    <xsl:template match="comment()"> <!-- rule to process each comment -->
    
        <xsl:text disable-output-escaping="yes">&lt;!--</xsl:text>
        <xsl:value-of select="."/>
        <xsl:text disable-output-escaping="yes">--&gt;</xsl:text>
        <xsl:text>&#10;</xsl:text>
        
    </xsl:template>

    <!-- ===================================================== -->

    <xsl:template name="substitute-element-name">

        
    </xsl:template>

    <!-- ===================================================== -->

    <xsl:template name="handle-comment-documentation">
        <xsl:variable name="combinedAppinfo">
            <xsl:if test="(string-length(@comment) > 0)">
                <xsl:value-of select="normalize-space(@comment)"/>
            </xsl:if>
            <xsl:if test="(count(sisoenum) > 0)">
                <xsl:text> (SISO enumeration </xsl:text>
                <xsl:value-of select="normalize-space(concat(sisoenum/@type,' ',sisoenum/@comment))"/>
                <xsl:text>)</xsl:text>
            </xsl:if>
            <xsl:if test="(count(sisobitfield) > 0)">
                <xsl:text> (SISO bitfield enumeration, size </xsl:text>
                <xsl:value-of select="sisobitfield/@size"/>
                <xsl:text> bits, </xsl:text>
                <xsl:value-of select="normalize-space(concat(sisobitfield/@type,' ',sisobitfield/@comment))"/>
                <xsl:text>)</xsl:text>
            </xsl:if>
            <xsl:if test="(.//*[string-length(@countFieldName) > 0])">
                <xsl:text> (length of list found in field </xsl:text>
                <xsl:value-of select=".//*[string-length(@countFieldName) > 0]/@countFieldName"/>
                <xsl:text>)</xsl:text>
            </xsl:if>
        </xsl:variable>
        <xsl:if test="(string-length(normalize-space($combinedAppinfo)) > 0)">
            <xsl:element name="xs:annotation">
                <xsl:element name="xs:appinfo">
                    <xsl:value-of select="normalize-space($combinedAppinfo)"/>
                    <xsl:if test="(string-length(@aliasFor) > 0)">
                        <!--
                        <xsl:message>
                            <xsl:text>*** found </xsl:text>
                            <xsl:value-of select="@name"/>
                            <xsl:text> @aliasFor=</xsl:text>
                            <xsl:value-of select="@aliasFor"/>
                        </xsl:message>
                        -->
                        <xsl:element name="xs:attribute">
                            <xsl:attribute name="name"><xsl:text>aliasFor</xsl:text></xsl:attribute>
                            <xsl:attribute name="type"><xsl:text>xs:string</xsl:text></xsl:attribute>
                            <xsl:attribute name="fixed"><xsl:value-of select="@aliasFor"/></xsl:attribute>
                        </xsl:element>
                    </xsl:if>
                    <xsl:if test="(string-length(@id) > 0)">
                        <!--
                        <xsl:message>
                            <xsl:text>*** found </xsl:text>
                            <xsl:value-of select="@name"/>
                            <xsl:text> @id=</xsl:text>
                            <xsl:value-of select="@id"/>
                        </xsl:message>
                        -->
                        <xsl:element name="xs:attribute">
                            <xsl:attribute name="name"><xsl:text>id</xsl:text></xsl:attribute>
                            <xsl:attribute name="type"><xsl:text>xs:integer</xsl:text></xsl:attribute>
                            <xsl:attribute name="fixed"><xsl:value-of select="@id"/></xsl:attribute>
                        </xsl:element>
                    </xsl:if>
                </xsl:element>
            </xsl:element>
        </xsl:if>
    </xsl:template>

    <!-- ===================================================== -->
    
    <xsl:template name="isSimpleType">
        <xsl:param name="type"/>
        
        <xsl:value-of select="starts-with($type, 'Unsigned') or starts-with($type, 'Vector')"/>
        
    </xsl:template>

    <!-- ===================================================== -->
    
    <xsl:template name="create-complex-types-primary-document">
        <xsl:for-each select="//classes/class">
            <xsl:sort select="@name" order="ascending"/>
                        
            <xsl:variable name="family">
                <xsl:if test="(string-length(../class[contains(@name, 'Family')]/@name) > 0)">
                    <xsl:value-of select="concat(../class[contains(@name, 'Family')]/@name,'Type')"/><!-- nameSuffix -->
                </xsl:if>
            </xsl:variable>
            <xsl:variable name="abstract">
                <xsl:choose>
                    <xsl:when test="(string-length(@abstract) > 0)">
                        <xsl:value-of select="@abstract"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>false</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="base">
                <xsl:choose>
                    <xsl:when test="(string-length($family) > 0)">
                        <xsl:value-of select="$family"/>
                    </xsl:when>
                    <xsl:when test="(string-length(@inheritsFrom) > 0)">
                        <xsl:value-of select="concat(@inheritsFrom,'Type')"/><!-- nameSuffix -->
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>base value not found</xsl:text>
                        <xsl:call-template name="warning-comment-message">
                            <xsl:with-param name="warning">
                                <xsl:value-of select="local-name()"/>
                                <xsl:text> </xsl:text>
                                <xsl:value-of select="@name"/>
                                <xsl:text> base value not found</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            
            <xsl:variable name="nameSuffix">
                <xsl:if test="not(contains(@name, 'Pdu')) or starts-with(@name, 'Pdu') or contains(@name, 'FamilyPdu')">
                    <xsl:text>Type</xsl:text>
                </xsl:if>
            </xsl:variable>
            <xs:complexType name="{concat(@name,$nameSuffix)}" abstract="{$abstract}">
            
                <!-- debug -->
                <xsl:comment>
                    <xsl:text>abstract='</xsl:text>
                    <xsl:value-of select="$abstract"/>
                    <xsl:text>' base='</xsl:text>
                    <xsl:value-of select="$base"/>
                    <xsl:if test="(string-length($family) > 0)">
                        <xsl:text>' family='</xsl:text>
                        <xsl:value-of select="$family"/>
                    </xsl:if>
                    <xsl:text>'</xsl:text>
                </xsl:comment>
                <xsl:call-template name="handle-comment-documentation"/>
                <xs:complexContent>
                    <xs:extension base="{$base}">
                        <!-- some 'attribute' entries in the XML files are actually schema elements, must process those first -->
                        <xsl:if test="                (count(attribute[(classRef)]) > 0) or
                                                      (count(attribute[objectlist/classRef][objectlist/classRef/@name != 'UnsignedDISInteger']) > 0)">
                            <xs:sequence>
                                <xsl:apply-templates select="attribute[   (classRef)] | 
                                                             attribute[objectlist/classRef][objectlist/classRef/@name != 'UnsignedDISInteger']"/>
                            </xs:sequence>
                            
                            <xsl:if test="(count(attribute[not(classRef)][not(objectlist)]) +
                                           count(attribute[objectlist/classRef][objectlist/classRef/@name  = 'UnsignedDISInteger']) > 0)">
        <xsl:comment>
            <xsl:text> ========== debug: divider between elements and attributes ========== </xsl:text>
        </xsl:comment>
                            </xsl:if>
                        </xsl:if>
                        <!-- now 'attribute' entries that are schema attributes -->
                        <xsl:apply-templates         select="attribute[not(classRef)][not(objectlist)]"/>
<!--
        <xsl:comment>
            <xsl:text> ========== debug: schema attribute divider before UnsignedDISInteger only ========== </xsl:text>
        </xsl:comment>
-->
                        <xsl:apply-templates         select="attribute[objectlist/classRef][objectlist/classRef/@name  = 'UnsignedDISInteger']"/>
                    </xs:extension>
                </xs:complexContent>
            </xs:complexType>
        </xsl:for-each>
    </xsl:template>

    <!-- ===================================================== -->

    <xsl:template name="simple-type-normalization">
        <xsl:param name="originalType"/>
        <!-- XML Schema 3.3 Derived datatypes, https://www.w3.org/TR/xmlschema-2/#built-in-derived -->
        
        <!-- TODO check -->
        <xsl:choose>
            <xsl:when test="($originalType = 'uint8')">
                <xsl:text>xs:unsignedByte</xsl:text>
            </xsl:when>
            <xsl:when test="($originalType = 'uint16')">
                <xsl:text>xs:unsignedShort</xsl:text>
            </xsl:when>
            <xsl:when test="($originalType = 'uint32')">
                <xsl:text>xs:unsignedLong</xsl:text>
            </xsl:when>
            <xsl:when test="($originalType = 'uint64')">
                <xsl:text>xs:unsignedInt</xsl:text>
            </xsl:when>
            <xsl:when test="($originalType = 'int8')">
                <!-- unused -->
                <xsl:text>xs:byte</xsl:text>
            </xsl:when>
            <xsl:when test="($originalType = 'int16')">
                <xsl:text>xs:short</xsl:text>
            </xsl:when>
            <xsl:when test="($originalType = 'int32')">
                <xsl:text>xs:long</xsl:text>
            </xsl:when>
            <xsl:when test="($originalType = 'int64')">
                <xsl:text>xs:int</xsl:text>
            </xsl:when>
            <xsl:when test="($originalType = 'float32')">
                <xsl:text>xs:float</xsl:text>
            </xsl:when>
            <xsl:when test="($originalType = 'float64')">
                <xsl:text>xs:double</xsl:text>
            </xsl:when>
            <!--
            <xsl:when test="($originalType = '')">
                <xsl:text></xsl:text>
            </xsl:when>
            -->
            <xsl:otherwise>
                <xsl:value-of select="$originalType"/>
                <xsl:message>
                    <xsl:text>*** type correspondence not found for </xsl:text>
                    <xsl:value-of select="$originalType"/>
                </xsl:message>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>

    <!-- ===================================================== -->

    <xsl:template name="warning-comment-message">
        <xsl:param name="warning"/>
        
        <xsl:comment>
            <xsl:value-of select="$warning"/>
        </xsl:comment>
        <xsl:message>
            <xsl:text>*** </xsl:text>
            <xsl:value-of select="$warning"/>
        </xsl:message>
    </xsl:template>


</xsl:stylesheet>
